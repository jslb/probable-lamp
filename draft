#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <ctype.h>


void addFunc (char *endreg, char *val1, char *val2)
{
    printf("addFunc string:\n");
    puts(endreg);
    puts(val1);
    puts(val2);
    
 
}

void movFunc (char *endreg, char *val)
{
    printf("movFunc string:\n");
    puts(endreg);
    puts(val);
}


int main()
{
    char inputstr[50];
    char inst[10];
    int marker = 1;
    int spacebool;
    char *argsstr[10];
    
    //Register declaration
    int R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;
    
    //runs continuously
    while (marker == 1)
    {
        printf("Enter input: ");
        
        //reads, stores, and prints, input
        fgets(inputstr, sizeof(inputstr), stdin);  // read string
        printf("You entered: ");
        puts(inputstr);    // display string
        
        char *frag = strtok(inputstr, " ");
        int counter = 0;
        
        // loop through the string to split at each " "
        while( frag != NULL ) 
        {
            printf( " %s\n", frag ); //printing each
            argsstr[counter++] = frag;
            frag = strtok(NULL, " ");
        }
        
        //add each frag into new array (argsstr)
        int p;
        for (p = 0; p < counter; ++p)
        {
            printf( "%s\n", argsstr[p]) ;
        }
        
        printf("Instruction: %s", argsstr[0]);
                
        if (strcmp(argsstr[0], "add") == 0)
        {
            printf("\ncall add func\n"); // want to give the function, the rest of the input string
            addFunc(argsstr[1], argsstr[2], argsstr[3]); //passing the inst to addFunc
        } 
        else if (strcmp(argsstr[0], "mov") == 0)
        {
            printf("\ncall move func\n");
            movFunc(argsstr[1], argsstr[2]);
        } 
        else 
        {
            printf("Unknown instruction");
        }
    }
    
    
    //out of while loops, exits
    return 0;
}

/*int registerFunc(char *reg)
{
    printf("string: %s", reg);
    
    if (strcmp(tolower(reg), "r0") == 0)
    {
        regCode = 0;
    } else if (strcmp(tolower(reg), "r1") == 0)
    {
        regCode = 1;
    } else if (strcmp(tolower(reg), "r2") == 0)
    {
        regCode = 2;
    } 
    
    return regCode;
    
}*/
